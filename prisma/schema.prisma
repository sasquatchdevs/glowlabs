generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model role {
  id          String @id @default(cuid())
  name        String @unique
  description String
}

model User {
  id               String    @id @default(cuid())
  name             String? // @db.Text
  email            String?   @unique // @db.Text
  emailVerified    DateTime? // @db.Text
  image            String? // @db.Text
  firstName        String
  lastName         String
  phoneNumber      String? // @db.Text
  squareCustomerId String? // @db.Text
  roleId           Int
  accounts         Account[]
  sessions         Session[]
}

model user_roles {
  roleId Int
  userId Int

  @@id([roleId, userId])
}

model unregisteredSquareUser {
  id               Int      @id @default(autoincrement())
  emailHash        String
  squareCustomerId String   @unique
  createdAt        DateTime @default(now())
}

model NewsletterSignUps {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
}
